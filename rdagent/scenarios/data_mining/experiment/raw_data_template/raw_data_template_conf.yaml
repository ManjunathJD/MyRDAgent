import logging
import os
import sys
from typing import Any, Dict, List, Optional, Union

from rdagent.log.base import LogBase
from rdagent.utils.env import Env
from rdagent.utils.fmt import fmt_table
from rdagent.utils.misc import setup_dir


class Logger(LogBase):
    _default_config: Dict[str, Any] = {
        "log_path": "./log",
        "log_file_prefix": "log",
        "file_level": logging.DEBUG,
        "console_level": logging.INFO,
        "format": "%(asctime)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s",
    }

    def __init__(self, name: str, config: Dict[str, Any] = None) -> None:
        super().__init__(name)
        self.config: Dict[str, Any] = (
            self._default_config if config is None else config
        )
        self._setup_logger()

    @classmethod
    def _check_level(cls, level: Union[int, str]) -> int:
        if isinstance(level, str):
            if level.lower() == "debug":
                level = logging.DEBUG
            elif level.lower() == "info":
                level = logging.INFO
            elif level.lower() == "warning":
                level = logging.WARNING
            elif level.lower() == "error":
                level = logging.ERROR
            elif level.lower() == "critical":
                level = logging.CRITICAL
            else:
                raise ValueError(f"Unknown log level: {level}")
        return level

    def _setup_logger(self) -> None:
        logger = logging.getLogger(self.name)
        logger.setLevel(logging.DEBUG)
        log_path = self.config["log_path"]
        setup_dir(log_path)
        log_file_prefix = self.config["log_file_prefix"]
        log_file = os.path.join(log_path, f"{log_file_prefix}.log")
        fh = logging.FileHandler(log_file, mode="a", encoding="utf-8")
        fh.setLevel(self._check_level(self.config["file_level"]))
        ch = logging.StreamHandler(sys.stdout)
        ch.setLevel(self._check_level(self.config["console_level"]))
        formatter = logging.Formatter(self.config["format"])
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)
        logger.addHandler(fh)
        logger.addHandler(ch)
        self.logger = logger

    def log_table(
        self,
        data: List[List[str]],
        headers: Optional[List[str]] = None,
        title: str = "",
    ) -> None:
        self.logger.info(fmt_table(data, headers, title))